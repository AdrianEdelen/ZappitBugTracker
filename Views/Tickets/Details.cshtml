@model ZappitBugTracker.Models.Ticket
@inject Microsoft.AspNetCore.Identity.UserManager<BTUser> userManager
@inject ZappitBugTracker.services.IBTRolesService rolesService
@inject ZappitBugTracker.services.IBTProjectService projectService
@inject ZappitBugTracker.services.IBTAccessService accessService
@inject ZappitBugTracker.services.IBTAttachmentService attachmentService
@{
	var user = await userManager.GetUserAsync(User);
	var userId = await userManager.GetUserIdAsync(user);
	var ticketId = Model.Id;
	ViewData["Title"] = "Details";
}
<h1>@Model.Title</h1>
<hr />
<div>
	<!-- Description and Details-->
	<div class="row mb-4">
		<!-- Description -->
		<div class="col">
			<div class="row mb-4">
				<div class="col">
					<div class="card shadow mb-4 h-100">
						<div class="card-header py-3">
							<h6 class="m-0 font-weight-bold text-primary">Description</h6>
						</div>
						<div class="card-body">
							@Html.DisplayFor(model => model.Description)
						</div>
					</div>
				</div>
			</div>
			<div class="row">
				<!-- End Description -->
				<!-- Details -->
				<div class="col">
					<div class="card shadow mb-4 h-100">
						@if (Model.TicketPriorityId == 1)
						{
							<div class="card-header py-3 bg-info">
								<h6 class="m-0 font-weight-bold text-dark">
									Ticket Details
									@if (await accessService.CanInteractTicket(userId, Model.Id, "Developer")
					 || await rolesService.IsUserInRole(user, "Admin")
					 || (await rolesService.IsUserInRole(user, "ProjectManager")
					 && await projectService.IsUserOnProject(userId, Model.ProjectId))
					 || userId == Model.OwnerUserId)
									{<a class="text-dark" asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticketId">(edit)</a>}
								</h6>
							</div>
						}
						@if (Model.TicketPriorityId == 2)
						{
							<div class="card-header py-3 bg-success">
								<h6 class="m-0 font-weight-bold text-dark">
									Ticket Details
									@if (await accessService.CanInteractTicket(userId, Model.Id, "Developer")
					 || await rolesService.IsUserInRole(user, "Admin")
					 || (await rolesService.IsUserInRole(user, "ProjectManager")
					 && await projectService.IsUserOnProject(userId, Model.ProjectId))
					 || userId == Model.OwnerUserId)
									{
										<a class="text-dark" asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticketId">(edit)</a>
									}
								</h6>
							</div>
						}
						@if (Model.TicketPriorityId == 3)
						{
							<div class="card-header py-3 bg-warning">
								<h6 class="m-0 font-weight-bold text-dark">
									Ticket Details
									@if (await accessService.CanInteractTicket(userId, Model.Id, "Developer")
					 || await rolesService.IsUserInRole(user, "Admin")
					 || (await rolesService.IsUserInRole(user, "ProjectManager")
					 && await projectService.IsUserOnProject(userId, Model.ProjectId))
					 || userId == Model.OwnerUserId)
									{
										<a class="text-dark" asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticketId">(edit)</a>
									}
								</h6>
							</div>
						}
						@if (Model.TicketPriorityId == 4)
						{
							<div class="card-header py-3 bg-danger">
								<h6 class="m-0 font-weight-bold text-dark">
									Ticket Details
									@if (await accessService.CanInteractTicket(userId, Model.Id, "Developer")
					 || await rolesService.IsUserInRole(user, "Admin")
					 || (await rolesService.IsUserInRole(user, "ProjectManager")
					 && await projectService.IsUserOnProject(userId, Model.ProjectId))
					 || userId == Model.OwnerUserId)
									{
										<a class="text-dark" asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticketId">(edit)</a>
									}
								</h6>
							</div>
						}
						<div class="card-body">
							<div class="row">
								<div class="col">
									<dl>
										<dt class="">
											Created Date
										</dt>
										<dd class="col-sm-10">
											@Html.DisplayFor(model => model.Created)
										</dd>
										@if (Model.Updated != null)
										{
											<dt class="">
												Updated Date
											</dt>
											<dd class="col-sm-10">
												@Html.DisplayFor(model => model.Updated)
											</dd>
										}
										else
										{
											<dt class="">
												Updated Date
											</dt>
											<dd class="col-sm-10">
												Not Applicable
											</dd>
										}
										<dt class="">
											Priority
										</dt>
										<dd class="col-sm-10">
											@Html.DisplayFor(model => model.TicketPriority.Name)
										</dd>
										<dt class="">
											Status
										</dt>
										<dd class="col-sm-10">
											@Html.DisplayFor(model => model.TicketStatus.Name)
										</dd>

									</dl>
								</div>
								<div class="col">
									<dl>

										<dt class="">
											Project Name
										</dt>
										<dd class="col-sm-10">
											@Html.DisplayFor(model => model.Project.Name)
										</dd>
										<dt class="">
											Category
										</dt>
										<dd class="col-sm-10">
											@Html.DisplayFor(model => model.TicketType.Name)
										</dd>
										<dt class="">
											Ticket Creator
										</dt>
										<dd class="col-sm-10">
											@Html.DisplayFor(model => model.OwnerUser.FullName)
										</dd>


										<dt class="">
											Assigned Developer
										</dt>
										@if (Model.DeveloperUserId != null)
										{
											<dd class="col-sm-10">
												@Html.DisplayFor(model => model.DeveloperUser.FullName)
											</dd>
										}
										else
										{
											<dd class="col-sm-10">
												Unassigned
											</dd>
										}
									</dl>
								</div>
							</div>
						</div>
					</div>

				</div>
				<!-- End Details-->
			</div>
		</div>
		<!-- End Description and Details -->
		<!-- Comments-->
		<div class="col">
			<div class="card shadow mb-4 h-100">
				<div class="card-header py-3">
					<h6 class="m-0 font-weight-bold text-primary">Comments</h6>
				</div>
				<div class="card-body">
					<div class="row">
						<table class="table myTableComments" id="myTable1">
							<thead>
								<tr>
									<th>
										Comment
									</th>
									<th>
										Author
									</th>
									<th>
										Created
									</th>
								</tr>
							</thead>
							<tbody>
								@foreach (var item in Model.Comments)
								{
									<tr>
										<td>
											@Html.DisplayFor(modelItem => item.Comment)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.User.FullName)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Created)
										</td>
									</tr>
								}
							</tbody>
						</table>
					</div>
					<div class="row">
						<div class="col">
							@if (await accessService.CanInteractTicket(userId, Model.Id, "Developer")
							|| await rolesService.IsUserInRole(user, "Admin")
							|| (await rolesService.IsUserInRole(user, "ProjectManager")
							&& await projectService.IsUserOnProject(userId, Model.ProjectId))
							|| userId == Model.OwnerUserId)
							{
								<form asp-controller="TicketComments" asp-action="Create">
									<div asp-validation-summary="ModelOnly" class="text-danger"></div>
									@Html.Hidden("TicketId", Model.Id)
									<div class="form-group">
										<textarea name="Comment" class="form-control"> </textarea>
									</div>
									<div class="form-group d-flex align-items-end flex-column">
										<input type="submit" value="Submit Comment" class="btn btn-primary mt-auto" style=""/>
									</div>
								</form>
							}
						</div>
					</div>
				</div>
			</div>
		</div>
		<!-- End Comments-->
	</div>
	<!--Attachments-->
	<div class="row">
		<div class="col">
			<div class="card shadow mb-4">
				<div class="card-header py-3">
					<h6 class="m-0 font-weight-bold text-primary">Attachments</h6>
				</div>
				<div class="card-body">
					<div class="row">
						<div class="col-2">
							<div>
								<form asp-action="MakeAttachment" asp-controller="Tickets" enctype="multipart/form-data" method="post">
									<div asp-validation-summary="ModelOnly" class="text-danger"></div>
									<input type="hidden" asp-for="@Model.Id" name="TicketId">

									<div class="media-body ml-3">
										
										<label>
											FileName
											<input asp-for="@Model.Attachments.FirstOrDefault().Description" type="text" class="form-control" />
										</label><br />
										<label class="btn btn-outline-primary btn-sm">
											<input asp-for="@Model.Attachments.FirstOrDefault().FormFile" type="file" />
										</label>
										<button type="submit" class="btn btn-outline-secondary btn-sm md-btn-flat">Submit</button>
									</div>
								</form>
							</div>
						</div>
						<div class="col">
							@foreach (TicketAttachment item in Model.Attachments)
							{
								@if (item != null)
								{

									<div class="col-sm-2">
										
										<div class="file">
											<a asp-controller="Tickets" asp-action="DownloadFile" asp-route-id="@item.Id">
												<div class="icon">
													<img src="@attachmentService.GetFileIcon(item.FileName)" style="height:60px;width:60px" />
												</div>
												<div class="file-name">
													<p class="m-b-5 text-muted">@item.Description</p>
													<small>Size: @attachmentService.FormatFileSize(item.FileData.Length) <span class="date text-muted">@item.Created.ToString("MMM dd, yyyy")</span></small>
												</div>
											</a>
											<a asp-controller="Tickets" asp-action="DownloadFile" asp-route-id="@item.Id" download><div class="btn btn-outline-primary">Download</div></a>
										</div>
										
									</div>
								}
							}
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- End Attachments-->
	<!-- Histories -->
	<div class="row">
		<div class="col">
			<div class="card shadow mb-4">
				<div class="card-header py-3">
					<h6 class="m-0 font-weight-bold text-primary">Ticket Histories</h6>
				</div>
				<div class="card-body">
					<table class="table myTableHistory" id="myTable1">
						<thead>
							<tr>
								<th>
									Changed Field
								</th>
								<th>
									Original
								</th>
								<th>
									Updated
								</th>
								<th>
									Change Date
								</th>

								<th>
									Changed By
								</th>

							</tr>
						</thead>
						<tbody>
							@foreach (var item in Model.Histories)
							{
								<tr>
									<td>
										@Html.DisplayFor(modelItem => item.Property)
									</td>
									<td>

										@Html.DisplayFor(modelItem => item.OldValue)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.NewValue)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Created)
									</td>

									<td>
										@Html.DisplayFor(modelItem => item.User.Id)
									</td>

								</tr>
							}
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>
	<!-- End Histories-->
</div>