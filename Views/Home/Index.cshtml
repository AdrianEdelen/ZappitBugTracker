@*@model IEnumerable<ZappitBugTracker.Models.Ticket>*@
@model IEnumerable<ZappitBugTracker.Models.ViewModels.TicketsAndProjectsViewModel>
@inject Microsoft.AspNetCore.Identity.UserManager<BTUser> userManager
@inject ZappitBugTracker.services.IBTRolesService rolesService
@inject ZappitBugTracker.services.IBTProjectService projectService
@inject ZappitBugTracker.services.IBTAccessService accessService
@inject ZappitBugTracker.services.IBTChartAndDisplay chart
@{

	var user = await userManager.GetUserAsync(User);
	var userId = await userManager.GetUserIdAsync(user);
	ViewData["Title"] = "Index";
}



@*<a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
	<a class="nav-link text-dark" asp-area="" asp-controller="UserRoles" asp-action="ManageUserRoles">Assign user Roles</a>
	<a class="nav-link text-dark" asp-area="" asp-controller="Projects" asp-action="Index">View Projects</a>
	<a class="nav-link text-dark" asp-area="" asp-controller="Tickets" asp-action="Index">View Assigned Tickets</a>
	<a class="nav-link text-dark" asp-area="" asp-controller="TicketHistories" asp-action="Index">View Ticket Histories</a>*@

<!-- Page Heading -->
@*<div class="d-sm-flex align-items-center justify-content-between mb-4">
		<h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
		<a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
			<i class="fas fa-download fa-sm text-white-50"></i> Generate Report
		</a>
	</div>*@

<!-- Content Row -->
<div class="row">


	@*Open Tickets*@
	<div class="col-xl-3 col-md-6 mb-4">
		<div class="card border-bottom-primary shadow h-100 py-2">
			<div class="card-body">
				<div class="row no-gutters align-items-center">
					<div class="col mr-2">
						<div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
							Total Open tickets
						</div>
						<div class="h5 mb-0 font-weight-bold text-gray-800"><span>@chart.OpenTickets()</span></div>
					</div>
					<div class="col-auto">
						<i class="fas fa-calendar fa-2x text-gray-300"></i>
					</div>
				</div>
			</div>
		</div>
	</div>
	@*Urgent Tickets*@
	<div class="col-xl-3 col-md-6 mb-4">
		<div class="card border-bottom-danger shadow h-100 py-2">
			<div class="card-body">
				<div class="row no-gutters align-items-center">
					<div class="col mr-2">
						<div class="text-xs font-weight-bold text-danger text-uppercase mb-1">
							Urgent Tickets
						</div>
						<div class="h5 mb-0 font-weight-bold text-gray-800">@chart.UrgentTickets()</div>
					</div>
					<div class="col-auto">
						<i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
					</div>
				</div>
			</div>
		</div>
	</div>
	@*New Tickets Last 24*@
	<div class="col-xl-3 col-md-6 mb-4">
		<div class="card border-bottom-info shadow h-100 py-2">
			<div class="card-body">
				<div class="row no-gutters align-items-center">
					<div class="col mr-2">
						<div class="text-xs font-weight-bold text-info text-uppercase mb-1">
							New Tickets In the Last 24 Hours
						</div>
						<div class="row no-gutters align-items-center">
							<div class="col-auto">
								<div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">@chart.TicketsToday()</div>
							</div>
							<div class="col">
								
							</div>
						</div>
					</div>
					<div class="col-auto">
						<i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
					</div>
				</div>
			</div>
		</div>
	</div>
	@*Unassigned Tickets*@
	<div class="col-xl-3 col-md-6 mb-4">
		<div class="card border-bottom-warning shadow h-100 py-2">
			<div class="card-body">
				<div class="row no-gutters align-items-center">
					<div class="col mr-2">
						<div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
							Tickets Pending Assignment
						</div>
						<div class="h5 mb-0 font-weight-bold text-gray-800">5</div>
					</div>
					<div class="col-auto">
						<i class="fas fa-comments fa-2x text-gray-300"></i>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
@*Content Row*@
<div class="row">
	@*Area Chart*@
	<div class="col-xl-8 col-lg-7">
		<div class="card shadow mb-4">
			@*Card Header - Dropdown*@
			<div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
				<h6 class="m-0 font-weight-bold text-primary">Tickets By Day</h6>
			</div>
			@*Card Body*@
			<div class="card-body">
				<div class="chart-area">
					<canvas id="myAreaChart"></canvas>
				</div>
			</div>
		</div>
	</div>
	@*Pie Chart*@
	<div class="col-xl-4 col-lg-5">
		<div class="card shadow mb-4">
			@*Card Header - Dropdown*@
			<div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
				<h6 class="m-0 font-weight-bold text-primary">Open Tickets By Type</h6>
			</div>
			@*Card Body*@
			<div class="card-body">
				<div class="chart-pie pt-4 pb-2">
					<canvas id="myPieChart"></canvas>
				</div>
				<div class="mt-4 text-center small">
					<span class="mr-2">
						<i class="fas fa-circle text-primary"></i> UI
					</span>
					<span class="mr-2">
						<i class="fas fa-circle text-success"></i> Database
					</span>
					<span class="mr-2">
						<i class="fas fa-circle text-info"></i> User Experience
					</span>
					<span class="mr-2">
						<i class="fas fa-circle text-danger"></i> Back End
					</span>
					<span class="mr-2">
						<i class="fas fa-circle text-dark"></i> Feature Request
					</span>
				</div>
			</div>
		</div>
	</div>
</div>



@*  accordion collapse *@

<div id="accordion">
	<div class="card">
		<div class="card-header" id="headingOne1">
			<h5 class="mb-0">
				<button class="btn btn-link font-weight-bold text-primary collapsed" data-toggle="collapse" data-target="#collapseOne1" aria-expanded="true" aria-controls="collapseOne1">
					Your Tickets <i class="fas fa-angle-down rotate-icon"></i>
				</button>
			</h5>
		</div>

		<div id="collapseOne1" class="collapse show" aria-labelledby="headingOne1" data-parent="#accordion">
			<div class="card-body">
				<table class="table myTableTicketsIndex" id="myTable3">
					<thead>
						<tr>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.Title)
							</th>
							<th>
								Last Updated
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.Project)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.TicketType)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.TicketPriority)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.TicketStatus)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.OwnerUser)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.DeveloperUser)
							</th>

						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model)
						{
							if (item.Ticket != null)
							{

								if (await accessService.CanInteractTicket(userId, item.Ticket.Id, "Developer")
										|| await rolesService.IsUserInRole(user, "Admin")
										|| (await rolesService.IsUserInRole(user, "ProjectManager")
										&& await projectService.IsUserOnProject(userId, item.Ticket.ProjectId))
										|| userId == item.Ticket.OwnerUserId
										)
								{
									<tr>
										<td>
											<a asp-controller="Tickets" asp-action="Details" asp-route-id="@item.Ticket.Id">
												@Html.DisplayFor(modelItem => item.Ticket.Title)
											</a>
										</td>
										@if (item.Ticket.Updated == null)
										{
											<td>
												@Html.DisplayFor(modelItem => item.Ticket.Created)

											</td>
										}
										else
										{
											<td>
												@Html.DisplayFor(modelItem => item.Ticket.Updated)
											</td>
										}
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.Project.Name)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.TicketType.Name)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.TicketPriority.Name)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.TicketStatus.Name)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.OwnerUser.FullName)
										</td>
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.DeveloperUser.FullName)
										</td>

									</tr>
								}
							}
						}


					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="card">
		<div class="card-header" id="headingTwo2">
			<h5 class="mb-0">
				<button class="btn btn-link font-weight-bold text-primary collapsed" data-toggle="collapse" data-target="#collapseTwo2" aria-expanded="false" aria-controls="collapseTwo2">
					All Tickets <i class="fas fa-angle-down rotate-icon"></i>
				</button>
			</h5>
		</div>
		<div id="collapseTwo2" class="collapse" aria-labelledby="headingTwo2" data-parent="#accordion">
			<div class="card-body">
				<table class="table" id="allTicketsTable">
					<thead>
						<tr>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.Title)
							</th>

							<th>
								Last Updated
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.Project)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.TicketType)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.TicketPriority)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.TicketStatus)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.OwnerUser)
							</th>
							<th>
								@Html.DisplayNameFor(model => model.Ticket.DeveloperUser)
							</th>

						</tr>
					</thead>
					<tbody>
						@foreach (var item in Model)
						{
							if (item.Ticket != null)
							{
								<tr>
									<td>
										<a asp-controller="Tickets" asp-action="Details" asp-route-id="@item.Ticket.Id">
											@Html.DisplayFor(modelItem => item.Ticket.Title)
										</a>
									</td>

									@if (item.Ticket.Updated == null)
									{
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.Created)
										</td>
									}
									else
									{
										<td>
											@Html.DisplayFor(modelItem => item.Ticket.Updated)
										</td>
									}
									<td>
										@Html.DisplayFor(modelItem => item.Ticket.Project.Name)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Ticket.TicketType.Name)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Ticket.TicketPriority.Name)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Ticket.TicketStatus.Name)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Ticket.OwnerUser.FullName)
									</td>
									<td>
										@Html.DisplayFor(modelItem => item.Ticket.DeveloperUser.FullName)
									</td>

								</tr>
							}

						}

					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="card">
		<div class="card-header" id="headingThree3">
			<h5 class="mb-0">
				<button class="btn btn-link font-weight-bold text-primary collapsed" data-toggle="collapse" data-target="#collapseThree3" aria-expanded="false" aria-controls="collapseThree3">
					Your Projects <i class="fas fa-angle-down rotate-icon"></i>
				</button>
			</h5>
		</div>
		<div id="collapseThree3" class="collapse" aria-labelledby="headingThree3" data-parent="#accordion">
			<div class="card-body">
				<table class="table" id="projectsTable">
					<thead>
						<tr>
							<th>
								@Html.DisplayNameFor(model => model.Project.Name)
							</th>
							<th></th>
						</tr>
					</thead>
					<tbody>

						@foreach (var item in Model)
						{
							if (item.Project != null)
							{
								<tr>
									<td>
										<a asp-controller="Tickets" asp-action="ProjectTickets" asp-route-id="@item.Project.Id">@Html.DisplayFor(modelItem => item.Project.Name)</a>

									</td>
									<td>
										@if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
										{
											<a asp-action="AddProjectUsers" asp-route-id="@item.Project.Id">Add Users To Project</a>
										}

									</td>
								</tr>
							}

						}


					</tbody>
				</table>
			</div>
		</div>
	</div>
	<div class="card">
		<div class="card-header" id="headingFour4">
			<h5 class="mb-0">
				<button class="btn btn-link font-weight-bold text-primary collapsed" data-toggle="collapse" data-target="#collapseFour4" aria-expanded="false" aria-controls="collapseFour4">
					All Projects <i class="fas fa-angle-down rotate-icon"></i>
				</button>
			</h5>
		</div>
		<div id="collapseFour4" class="collapse" aria-labelledby="headingfour4" data-parent="#accordion">
			<div class="card-body">
				<table class="table" id="projectsTable">
					<thead>
						<tr>
							<th>
								@Html.DisplayNameFor(model => model.Project.Name)
							</th>

							<th></th>
						</tr>
					</thead>
					<tbody>

						@foreach (var item in Model)
						{
							if (item.Project != null)
							{
								<tr>
									<td>
										<a asp-controller="Tickets" asp-action="ProjectTickets" asp-route-id="@item.Project.Id">@Html.DisplayFor(modelItem => item.Project.Name)</a>
									</td>

									<td>
										@if (User.IsInRole("Admin") || User.IsInRole("ProjectManager"))
										{
											<a asp-action="AddProjectUsers" asp-route-id="@item.Project.Id">Add Users To Project</a>
										}
									</td>
								</tr>
							}


						}


					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>


<!-- Page level custom scripts -->


@section Scripts{
	<script>
	//step 1 - construct the url that we need to go to request the data
	var url = '@Url.Action("GetDemoChartData","charts")'
	//step 2 - start the structure for our AJAX call
	$.post(url).then(function (response) {
		new Morris.Bar({
			// ID of the element in which to draw the chart.
			element: 'myfirstchart',
			// Chart data records -- each entry in this array corresponds to a point on
			// the chart.
			data: response,
			// The name of the data record attribute that contains x-values.
			xkey: 'priority',
			// A list of names of data record attributes that contain y-values.
			ykeys: ['count'],
			// Labels for the ykeys -- will be displayed when you hover over the
			// chart.
			labels: ['Value'],
			grid: false,
			barColors: ["#0275d8", "#5cb85c", "#f0ad4e", "#d9534f"]
		});
	});


	</script>

	<script>
	// Set new default font family and font color to mimic Bootstrap's default styling
Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
Chart.defaults.global.defaultFontColor = '#858796';

// Pie Chart Example
		var url = '@Url.Action("PieChartTypes","charts")';
		var ctx = document.getElementById("myPieChart");
		$.post(url).then(function (response) {
			console.log(response);
			new Chart(ctx, {
				type: 'doughnut',
				data: {
					labels: ["UI", "Database", "User Experience", "Back End", "Feature Request"],
					datasets: [{
						data: response,
						backgroundColor: ['#0275d8', '#5cb85c', '#5bc0de', '#d9534f', '#292b2c'],
						hoverBackgroundColor: ['#2e59d9', '#17a673', '#2c9faf', '#ab3330', '#0a0a0a'],
						hoverBorderColor: "rgba(234, 236, 244, 1)",
					}],
				},
				options: {
					maintainAspectRatio: false,
					tooltips: {
						backgroundColor: "rgb(255,255,255)",
						bodyFontColor: "#858796",
						borderColor: '#dddfeb',
						borderWidth: 1,
						xPadding: 15,
						yPadding: 15,
						displayColors: false,
						caretPadding: 10,
					},
					legend: {
						display: false
					},
					cutoutPercentage: 80,
				},
			});
		});

	</script>

	<script>
		var url1 = '@Url.Action("WeeklyTickets","charts")';

		// Set new default font family and font color to mimic Bootstrap's default styling
		Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
		Chart.defaults.global.defaultFontColor = '#858796';

		function number_format(number, decimals, dec_point, thousands_sep) {
			// *     example: number_format(1234.56, 2, ',', ' ');
			// *     return: '1 234,56'
			number = (number + '').replace(',', '').replace(' ', '');
			var n = !isFinite(+number) ? 0 : +number,
				prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
				sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
				dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
				s = '',
				toFixedFix = function (n, prec) {
					var k = Math.pow(10, prec);
					return '' + Math.round(n * k) / k;
				};
			// Fix for IE parseFloat(0.55).toFixed(0) = 0;
			s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
			if (s[0].length > 3) {
				s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
			}
			if ((s[1] || '').length < prec) {
				s[1] = s[1] || '';
				s[1] += new Array(prec - s[1].length + 1).join('0');
			}
			return s.join(dec);
		}

	
		
		var ctx1 = document.getElementById("myAreaChart");
		$.post(url1).then(function (response) {
			console.log(response);
			new Chart(ctx1, {
				type: 'line',
				data: {
					labels: ["1", "2", "3", "4", "5", "6", "7"],
					datasets: [{
						label: "Earnings",
						lineTension: 0.3,
						backgroundColor: "rgba(78, 115, 223, 0.05)",
						borderColor: "rgba(78, 115, 223, 1)",
						pointRadius: 3,
						pointBackgroundColor: "rgba(78, 115, 223, 1)",
						pointBorderColor: "rgba(78, 115, 223, 1)",
						pointHoverRadius: 3,
						pointHoverBackgroundColor: "rgba(78, 115, 223, 1)",
						pointHoverBorderColor: "rgba(78, 115, 223, 1)",
						pointHitRadius: 10,
						pointBorderWidth: 2,
						data: response,
					}],
				},
				options: {
					maintainAspectRatio: false,
					layout: {
						padding: {
							left: 10,
							right: 25,
							top: 25,
							bottom: 0
						}
					},
					scales: {
						xAxes: [{
							time: {
								unit: 'date'
							},
							gridLines: {
								display: false,
								drawBorder: false
							},
							ticks: {
								maxTicksLimit: 7
							}
						}],
						yAxes: [{
							ticks: {
								maxTicksLimit: 5,
								padding: 10,
								// Include a dollar sign in the ticks
								//callback: function (value, index, values) {
								//	return '$' + number_format(value);
								//}
							},
							gridLines: {
								color: "rgb(234, 236, 244)",
								zeroLineColor: "rgb(234, 236, 244)",
								drawBorder: false,
								borderDash: [2],
								zeroLineBorderDash: [2]
							}
						}],
					},
					legend: {
						display: false
					},
					tooltips: {
						backgroundColor: "rgb(255,255,255)",
						bodyFontColor: "#858796",
						titleMarginBottom: 10,
						titleFontColor: '#6e707e',
						titleFontSize: 14,
						borderColor: '#dddfeb',
						borderWidth: 1,
						xPadding: 15,
						yPadding: 15,
						displayColors: false,
						intersect: false,
						mode: 'index',
						caretPadding: 10,
						callbacks: {
							label: function (tooltipItem, chart) {
								var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
								return datasetLabel + ': $' + number_format(tooltipItem.yLabel);
							}
						}
					}
				}
			});
		});
	</script>
}